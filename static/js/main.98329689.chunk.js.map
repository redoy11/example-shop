{"version":3,"sources":["store/ducks/shop.ts","store/index.ts","Containers/ShelveItem/ShelveItem.tsx","Components/CartItem/CartItem.tsx","Containers/Cart/Cart.tsx","hocs/withCart/withCart.tsx","Components/Header/Header.tsx","hocs/withHeader/withHeader.tsx","Containers/Shelve/Shelve.tsx","Containers/Product/Product.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["SET_SHOP_ITEMS","ADD_TO_CART","fetchShopItems","type","addToCartAction","productId","quantity","initialState","SeamlessImmutable","shopItems","cart","getAllShopItems","state","getQuantityById","getCartValues","defaultReducers","action","items","reducers","combineReducers","rootEpic","combineEpics","action$","pipe","ofType","mergeMap","ajax","getJSON","map","response","epicMiddleware","createEpicMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","mapDispatchToProps","addToCartActionCreator","ConnectedShelveItem","connect","parentProps","cartCount","_id","props","title","price","picture","stock","Card","className","to","CardActionArea","CardMedia","image","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","onClick","disabled","size","style","CartItem","count","addToCartHandler","ListItem","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","ListItemSecondaryAction","IconButton","edge","aria-label","Icon","ConnectedCart","cartObject","cartObjectKeys","lodash","keys","total","cartItems","pid","find","filter","item","forEach","length","List","key","Divider","withCart","Component","Header","withHeader","ORDER_OPTIONS","label","value","fetchShopItemsActionCreator","React","useState","showcasedItems","setShowcasedItems","isOrderAsc","setOrderAsc","useEffect","orderBy","TextField","select","onChange","event","target","option","MenuItem","ConnectedProduct","id","getShopItemById","getProduct","description","useParams","App","Fragment","basename","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98329689.chunk.js","sourcesContent":["import { AnyAction, Store } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport { ajax } from 'rxjs/ajax';\nimport { mergeMap, map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { Observable } from 'rxjs';\nimport lodash from 'lodash';\n\n/** interface for ShopItem  object */\nexport interface ShopItem {\n  _id: string;\n  title: string;\n  description: string;\n  picture: string;\n  price: number;\n  stock: number;\n}\n\n/** The reducer name */\nexport const reducerName = 'shop';\n\n// actions\n\n/** action types */\nexport const SET_SHOP_ITEMS = 'shop/reducer/shop/SET_SHOP_ITEMS';\nexport const FETCH_SHOP_ITEMS = 'shop/reducer/shop/SET_FETCH_ITEMS';\nexport const ADD_TO_CART = 'shop/reducer/shop/ADD_TO_CART';\n\n/** interface for SET_SHOP_ITEMS action */\nexport interface SetShopItemsAction extends AnyAction {\n  items: ShopItem[];\n  type: typeof SET_SHOP_ITEMS;\n}\n\n/** interface for FETCH_SHOP_ITEMS action */\nexport interface FetchShopItemsAction extends AnyAction {\n  type: typeof FETCH_SHOP_ITEMS;\n}\n\n/** interface for ADD_TO_CART action */\nexport interface AddToCartAction extends AnyAction {\n  productId: string;\n  quantity: number;\n  type: typeof ADD_TO_CART;\n}\n\n/** Create type for reducer actions */\nexport type ShopActionTypes =\n  | FetchShopItemsAction\n  | SetShopItemsAction\n  | AddToCartAction\n  | AnyAction;\n\n// action creators\n\n/** set shop items action creator\n * @param {ShopItem[]} items - shop items to be set\n * @returns {SetShopItemsAction} - an action to set items in store\n */\nexport const setShopItems = (items: ShopItem[]): SetShopItemsAction => ({\n  items,\n  type: SET_SHOP_ITEMS,\n});\n\n/** fetch shop items from the server\n * @returns {FetchShopItemsAction} - an action to fetch items from server\n */\nexport const fetchShopItems = (): FetchShopItemsAction => ({\n  type: FETCH_SHOP_ITEMS,\n});\n\n/**\n * add items to cart\n * @param {string} productId -  the product that is added\n * @param  {number} quantity - the quantity that is added to cart\n * @returns {AddToCartAction} - an action to add items to cart in store\n */\nexport const addToCartAction = (\n  productId: string,\n  quantity: number\n): AddToCartAction => ({\n  productId,\n  quantity,\n  type: ADD_TO_CART,\n});\n\n// epics\n\n/**\n * rxjs based epic to fetch shop items list from server\n * @param {Observable<ShopActionTypes>} action$ - a series of actions observables\n * @returns {Observable<Exclude<ShopActionTypes, FetchShopItemsAction>>} - an action observable other than the FETCH_SHOP_ITEMS\n */\nexport const fetchShopItemsEpic = (\n  action$: Observable<ShopActionTypes>\n): Observable<Exclude<ShopActionTypes, FetchShopItemsAction>> =>\n  action$.pipe(\n    ofType(FETCH_SHOP_ITEMS),\n    mergeMap(() =>\n      ajax\n        .getJSON(\n          `https://gist.githubusercontent.com/naieem/c138ff1f12847b2a1b8ad85866426d3d/raw/037825eee126d589ab3e1fff6c3d0119f33f3b5b/Products`\n        )\n        .pipe(map((response) => setShopItems(response as ShopItem[])))\n    )\n  );\n\n// the reducer\n\n/** interface for shop state in redux store */\ninterface ShopState {\n  shopItems: ShopItem[];\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  cart: object;\n}\n\n/** Create an immutable shop state */\nexport type ImmutableShopState = SeamlessImmutable.Immutable<ShopState>;\n\n/** initial shop state */\nconst initialState: ImmutableShopState = SeamlessImmutable({\n  shopItems: [],\n  cart: {},\n});\n\n/** the shop reducer function */\nexport default function reducer(\n  state: ImmutableShopState = initialState,\n  action: ShopActionTypes\n): ImmutableShopState {\n  switch (action.type) {\n    case SET_SHOP_ITEMS:\n      return SeamlessImmutable({\n        ...state,\n        shopItems: action.items,\n      });\n    case ADD_TO_CART:\n      return SeamlessImmutable({\n        ...state,\n        cart: {\n          ...state.cart,\n          [action.productId]: action.quantity,\n        },\n      });\n    default:\n      return state;\n  }\n}\n\n// selectors\n\n/** returns all the shop items\n * @param {Partial<Store>} state - the redux store\n * @returns { ShopItem[] } - the existing items\n */\nexport function getAllShopItems(state: Partial<Store>): ShopItem[] {\n  return (state as any)[reducerName].shopItems;\n}\n\n/**\n * returns the shop item by product id; otherwise null\n * @param {Partial<Store>} state - the redux store\n * @param {string} productId - the product id\n * @returns { ShopItem | null } - the product id if matched; otherwise null\n */\nexport function getShopItemById(\n  state: Partial<Store>,\n  productId: string\n): ShopItem | null {\n  return lodash.find((state as any)[reducerName].shopItems, { _id: productId });\n}\n\n/**\n * returns the shop item quantity in cart\n * @param {Partial<Store>} state - the redux store\n * @param {string} productId - the product id\n * @returns { number } - the quantity\n */\nexport function getQuantityById(\n  state: Partial<Store>,\n  productId: string\n): number {\n  return (state as any)[reducerName].cart[productId] || 0;\n}\n\n/**\n * returns the cart object value\n * @param state - the redux store\n * @returns { any } - the current object in the cart property of the store\n */\nexport function getCartValues(state: Partial<Store>): any {\n  return (state as any)[reducerName].cart;\n}\n","import { combineReducers, createStore, compose, applyMiddleware } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport { combineEpics } from 'redux-observable';\nimport { createEpicMiddleware } from 'redux-observable';\nimport shop, {\n  reducerName as shopReducer,\n  fetchShopItemsEpic,\n} from './ducks/shop';\n\n// reducers\n\n/** Initial reducers in the reducer registry */\nconst defaultReducers: any = {};\n\n/** Add shop reducer to registry */\ndefaultReducers[shopReducer] = shop;\n\n/** Create reducers from default reducers obj */\nconst reducers = combineReducers(defaultReducers);\n\n// epics\n\n/** Create root epics */\nexport const rootEpic = combineEpics(fetchShopItemsEpic);\n\n// middlewares\n\n/** Create the epic middleware */\nconst epicMiddleware = createEpicMiddleware();\n\n// Redux Dev Tools\n\n/** Create composer for redux dev tools */\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// store\n\n/** The initial store */\nconst store = createStore(\n  reducers,\n  SeamlessImmutable({}),\n  composeEnhancers(applyMiddleware(epicMiddleware))\n);\n\n/** Start the epic middleware */\nepicMiddleware.run(rootEpic);\n\nexport default store;\n","import React from 'react';\nimport {\n  ShopItem,\n  addToCartAction,\n  getQuantityById,\n} from '../../store/ducks/shop';\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Typography,\n  CardActions,\n  Button,\n} from '@material-ui/core';\nimport './ShelveItem.scss';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n/** interface to describe Shelve Item props */\ninterface ShelveItemProps extends ShopItem {\n  cartCount: number;\n  addToCartActionCreator: typeof addToCartAction;\n}\n\nconst ShelveItem: React.FC<ShelveItemProps> = (props: ShelveItemProps) => {\n  const {\n    _id,\n    title,\n    price,\n    picture,\n    addToCartActionCreator,\n    cartCount,\n    stock,\n  } = props;\n\n  const addToCartHandler = () => {\n    addToCartActionCreator(_id, cartCount + 1);\n  };\n\n  return (\n    <Card className=\"ShelveItem-card\">\n      <Link to={`/product/${_id}`}>\n        <CardActionArea>\n          <CardMedia\n            className=\"ShelveItem-media\"\n            image={picture}\n            title=\"Contemplative Reptile\"\n          ></CardMedia>\n          <CardContent className=\"ShelveItem-content\">\n            <Typography gutterBottom variant=\"body1\" component=\"p\">\n              {title}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {price}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Link>\n      <CardActions>\n        <Button\n          onClick={addToCartHandler}\n          disabled={cartCount === stock}\n          size=\"small\"\n          color=\"primary\"\n        >\n          Add to cart\n        </Button>\n        {cartCount === stock && (\n          <Typography\n            style={{ color: 'red' }}\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"p\"\n          >\n            Out of Stock\n          </Typography>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  cartCount: number;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: any\n): DispatchedStateProps => {\n  const result = {\n    cartCount: getQuantityById(state, parentProps._id),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  addToCartActionCreator: addToCartAction,\n};\n\n/** Connect ShelveItem to the redux store */\nconst ConnectedShelveItem = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ShelveItem);\n\nexport default ConnectedShelveItem;\n","import React from 'react';\nimport { ShopItem } from '../../store/ducks/shop';\nimport {\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Icon,\n} from '@material-ui/core';\n\n/** Interface to describe CartItem props */\ninterface CartItemProps extends ShopItem {\n  count: number;\n  addToCartHandler: any;\n}\n\nconst CartItem: React.FC<CartItemProps> = (props: CartItemProps) => {\n  const { _id, title, price, count, addToCartHandler, picture } = props;\n  const removeHandler = () => {\n    addToCartHandler(_id, 0);\n  };\n  return (\n    <ListItem>\n      <ListItemAvatar>\n        <Avatar variant=\"square\" alt=\"\" src={picture} />\n      </ListItemAvatar>\n      <ListItemText primary={title} secondary={`${count} x Tk ${price}`} />\n      <ListItemSecondaryAction>\n        <IconButton edge=\"start\" aria-label=\"delete\" onClick={removeHandler}>\n          <Icon>clear</Icon>\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default CartItem;\n","import React from 'react';\nimport './Cart.scss';\nimport {\n  ShopItem,\n  getAllShopItems,\n  addToCartAction,\n  getCartValues,\n} from '../../store/ducks/shop';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport lodash from 'lodash';\nimport {\n  List,\n  Typography,\n  Divider,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core';\nimport CartItem from '../../Components/CartItem/CartItem';\n\ninterface CartProps {\n  items: ShopItem[];\n  cartObject: any;\n  addToCartActionCreator: typeof addToCartAction;\n}\n\nconst Cart: React.FC<CartProps> = (props: CartProps) => {\n  const { cartObject, items, addToCartActionCreator } = props;\n  const cartObjectKeys = lodash.keys(cartObject);\n  let total = 0;\n  const cartItems = cartObjectKeys\n    .map((pid) => ({\n      ...(lodash.find(items, { _id: pid }) || {}),\n      count: cartObject[pid],\n      addToCartHandler: addToCartActionCreator,\n    }))\n    .filter((item) => item.count !== 0);\n  cartItems.forEach((item: any) => (total = total + item.count * item.price));\n  return (\n    <div className=\"Cart-container\">\n      <Typography variant=\"body2\"> Cart </Typography>\n      {cartItems.length > 0 && (\n        <List className=\"list-container\">\n          {cartItems.map((item: any) => (\n            <div key={item._id}>\n              <CartItem {...item} />\n            </div>\n          ))}\n          <Divider />\n          <ListItem>\n            <ListItemText primary={'Subtotal $ ' + total} secondary=\"\" />\n          </ListItem>\n        </List>\n      )}\n      {cartItems.length <= 0 && (\n        <List>\n          <ListItem>\n            <ListItemText primary=\"No items to display\" secondary=\"\" />\n          </ListItem>\n        </List>\n      )}\n    </div>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  items: ShopItem[];\n  cartObject: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    items: getAllShopItems(state),\n    cartObject: getCartValues(state),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  addToCartActionCreator: addToCartAction,\n};\n\n/** Connect Cart to the redux store */\nconst ConnectedCart = connect(mapStateToProps, mapDispatchToProps)(Cart);\n\nexport default ConnectedCart;\n","import React from 'react';\nimport './withCart.scss';\nimport ConnectedCart from '../../Containers/Cart/Cart';\n\nfunction withCart<P>(Component: React.ComponentType<P>) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return (props: P) => {\n    {\n      return (\n        <div className=\"withCart-container\">\n          <div className=\"withCart-main-content\">\n            <Component {...props} />\n          </div>\n          <div className=\"withCart-content\">\n            <ConnectedCart />\n          </div>\n        </div>\n      );\n    }\n  };\n}\n\nexport default withCart;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport './Header.scss';\n\nconst Header: React.FC = () => {\n  return (\n    <div className=\"Header-container\">\n      <Typography variant=\"h5\">Shop</Typography>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './withHeader.scss';\nimport Header from '../../Components/Header/Header';\n\nfunction withHeader<P>(Component: React.ComponentType<P>) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return (props: P) => {\n    {\n      return (\n        <div className=\"withHeader-container\">\n          <Header />\n          <Component {...props} />\n        </div>\n      );\n    }\n  };\n}\n\nexport default withHeader;\n","import React from 'react';\nimport {\n  getAllShopItems,\n  ShopItem,\n  fetchShopItems,\n} from '../../store/ducks/shop';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport lodash from 'lodash';\nimport { TextField, MenuItem, Typography } from '@material-ui/core';\nimport ShelveItem from '../ShelveItem/ShelveItem';\nimport './Shelve.scss';\nimport withCart from '../../hocs/withCart/withCart';\nimport withHeader from '../../hocs/withHeader/withHeader';\n\n/** Interface to describe Shelve props */\ninterface ShelveProps {\n  items: ShopItem[];\n  fetchShopItemsActionCreator: typeof fetchShopItems;\n}\n\n/** Interface to describe items order option */\ninterface OrderOption {\n  label: string;\n  value: 'asc' | 'desc';\n}\n\n/** Available item order option */\nconst ORDER_OPTIONS: OrderOption[] = [\n  { label: 'Sort by price high to low', value: 'desc' },\n  { label: 'Sort by price low to high', value: 'asc' },\n];\n\nconst Shelve: React.FC<ShelveProps> = (props: ShelveProps) => {\n  const { items, fetchShopItemsActionCreator } = props;\n\n  // component based states\n  /** showcasedItems are items that are viewable to shelves */\n  const [showcasedItems, setShowcasedItems] = React.useState<ShopItem[]>([]);\n  /** manages the order state of items based on price property*/\n  const [isOrderAsc, setOrderAsc] = React.useState<boolean>(false);\n\n  /** fetch the shop items from server on load */\n  React.useEffect(() => {\n    fetchShopItemsActionCreator();\n  }, []);\n\n  /** update the showcasedItems based on changes of items or price order  */\n  React.useEffect(() => {\n    if (isOrderAsc) {\n      setShowcasedItems(lodash.orderBy(items, ['price'], ['asc']));\n    } else {\n      setShowcasedItems(lodash.orderBy(items, ['price'], ['desc']));\n    }\n  }, [items, isOrderAsc]);\n\n  /**\n   * Updates order option based on selected option\n   * @param {React.ChangeEvent<HTMLInputElement>} event - order option change event\n   */\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setOrderAsc(event.target.value === 'asc' ? true : false);\n\n  return (\n    <div className=\"Shelve-container\">\n      <div className=\"Shelve-header\">\n        <Typography variant=\"body2\">\n          Showing {showcasedItems.length} out of {showcasedItems.length} items\n        </Typography>\n        <TextField\n          select\n          label=\"\"\n          value={isOrderAsc ? 'asc' : 'desc'}\n          onChange={handleChange}\n        >\n          {ORDER_OPTIONS.map((option: OrderOption) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n      <div className=\"Shelve-body\">\n        {showcasedItems.map((item) => (\n          <ShelveItem key={item._id} {...item} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  items: ShopItem[];\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    items: getAllShopItems(state),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  fetchShopItemsActionCreator: fetchShopItems,\n};\n\n/** Connect Shelve to the redux store */\nconst ConnectedShelve = connect(mapStateToProps, mapDispatchToProps)(Shelve);\n\nexport default withCart(withHeader(ConnectedShelve));\n","import React from 'react';\nimport './Product.scss';\nimport {\n  ShopItem,\n  addToCartAction,\n  getQuantityById,\n  getShopItemById,\n  fetchShopItems,\n} from '../../store/ducks/shop';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  Typography,\n  CardActionArea,\n  Card,\n  CardMedia,\n  CardContent,\n  CardActions,\n  Button,\n} from '@material-ui/core';\nimport { useParams, Link } from 'react-router-dom';\nimport withCart from '../../hocs/withCart/withCart';\nimport withHeader from '../../hocs/withHeader/withHeader';\n\ninterface ProductProps {\n  id: string;\n  count: number;\n  item: ShopItem | null;\n  addToCartActionCreator: typeof addToCartAction;\n  fetchShopItemsActionCreator: typeof fetchShopItems;\n}\n\nconst Product: React.FC<ProductProps> = (props: ProductProps) => {\n  const {\n    count,\n    item,\n    fetchShopItemsActionCreator,\n    addToCartActionCreator,\n  } = props;\n  React.useEffect(() => {\n    fetchShopItemsActionCreator();\n  }, []);\n  return (\n    <>\n      <Link to=\"/\">Back</Link>\n      {item && (\n        <Card className=\"ProductItem-card\">\n          <CardActionArea>\n            <CardMedia\n              className=\"ProductItem-media\"\n              image={item.picture}\n            ></CardMedia>\n            <CardContent className=\"ProductItem-content\">\n              <Typography gutterBottom variant=\"h5\" component=\"p\">\n                {item.title}\n              </Typography>\n              <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n                $ {item.price}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {item.description}\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button\n              onClick={() => {\n                addToCartActionCreator(item._id, count + 1);\n              }}\n              disabled={count === item.stock}\n              size=\"small\"\n              color=\"primary\"\n            >\n              Add to cart\n            </Button>\n            {count === item.stock && (\n              <Typography\n                style={{ color: 'red' }}\n                variant=\"body2\"\n                color=\"textSecondary\"\n                component=\"p\"\n              >\n                Out of Stock\n              </Typography>\n            )}\n          </CardActions>\n        </Card>\n      )}\n    </>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps extends Partial<ShopItem> {\n  count: number;\n  item: ShopItem | null;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: any\n): DispatchedStateProps => {\n  const getProduct = (id: string) => getShopItemById(state, id);\n  const getQuantity = (id: string) => getQuantityById(state, id);\n  const result = {\n    count: getQuantity(parentProps.id),\n    item: getProduct(parentProps.id),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  addToCartActionCreator: addToCartAction,\n  fetchShopItemsActionCreator: fetchShopItems,\n};\n\n/** Connect Product to the redux store */\nconst ConnectedProduct = connect(mapStateToProps, mapDispatchToProps)(Product);\n\nconst ProductWithRouter: React.FC = () => {\n  const { id } = useParams();\n  return <ConnectedProduct id={id} />;\n};\n\nexport default withCart(withHeader(ProductWithRouter));\n","import React from 'react';\nimport './App.scss';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Shelve from '../Containers/Shelve/Shelve';\nimport ConnectedProduct from '../Containers/Product/Product';\n\nconst App: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Router basename=\"/\">\n        <Switch>\n          <Route path=\"/product/:id\">\n            <ConnectedProduct />\n          </Route>\n          <Route path=\"/\">\n            <Shelve />\n          </Route>\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}