{"version":3,"sources":["store/ducks/shop.ts","store/index.ts","Components/Order/Order.tsx","Containers/ShelveItem/ShelveItem.tsx","Components/CartItem/CartItem.tsx","Containers/Cart/Cart.tsx","hocs/withCart/withCart.tsx","Components/Header/Header.tsx","hocs/withHeader/withHeader.tsx","Containers/Shelve/Shelve.tsx","hocs/withProductId/withProductId.tsx","Containers/Product/Product.tsx","Components/CheckoutItem/CheckoutItem.tsx","Containers/Checkout/Checkout.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["SET_SHOP_ITEMS","ADD_TO_CART","addToCartAction","productId","quantity","type","initialState","SeamlessImmutable","shopItems","cart","getAllShopItems","state","getQuantityById","getCartValues","defaultReducers","action","items","reducers","combineReducers","rootEpic","combineEpics","action$","pipe","ofType","mergeMap","ajax","getJSON","map","response","epicMiddleware","createEpicMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","Order","props","stock","cartCount","setHandler","withoutLabel","React","useState","count","setCount","useEffect","addToCartHandler","className","Fragment","IconButton","style","color","size","onClick","Icon","Typography","variant","component","TextField","value","onChange","event","parseInt","target","onBlur","requestedValue","disabled","Button","mapDispatchToProps","addToCartActionCreator","ConnectedShelveItem","connect","parentProps","_id","title","price","picture","Card","to","CardActionArea","CardMedia","image","CardContent","gutterBottom","CardActions","CartItem","ListItem","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","ListItemSecondaryAction","edge","aria-label","ConnectedCart","cartObject","cartObjectKeys","lodash","keys","total","cartItems","pid","find","filter","item","forEach","length","List","key","Divider","withCart","Component","Header","withHeader","ORDER_OPTIONS","label","showcasedItems","setShowcasedItems","isOrderAsc","setOrderAsc","orderBy","select","option","MenuItem","withProductId","id","useParams","getShopItemById","getProduct","Tabs","Tab","description","CheckoutItem","TableRow","TableCell","align","scope","TableContainer","Paper","Table","TableHead","TableBody","fetchShopItemsActionCreator","ConnectedApp","basename","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76f7942d.chunk.js","sourcesContent":["import { AnyAction, Store } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport { ajax } from 'rxjs/ajax';\nimport { mergeMap, map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { Observable } from 'rxjs';\nimport lodash from 'lodash';\n\n/** interface for ShopItem  object */\nexport interface ShopItem {\n  _id: string;\n  title: string;\n  description: string;\n  picture: string;\n  price: number;\n  stock: number;\n}\n\n/** The reducer name */\nexport const reducerName = 'shop';\n\n// actions\n\n/** action types */\nexport const SET_SHOP_ITEMS = 'shop/reducer/shop/SET_SHOP_ITEMS';\nexport const FETCH_SHOP_ITEMS = 'shop/reducer/shop/SET_FETCH_ITEMS';\nexport const ADD_TO_CART = 'shop/reducer/shop/ADD_TO_CART';\n\n/** interface for SET_SHOP_ITEMS action */\nexport interface SetShopItemsAction extends AnyAction {\n  items: ShopItem[];\n  type: typeof SET_SHOP_ITEMS;\n}\n\n/** interface for FETCH_SHOP_ITEMS action */\nexport interface FetchShopItemsAction extends AnyAction {\n  type: typeof FETCH_SHOP_ITEMS;\n}\n\n/** interface for ADD_TO_CART action */\nexport interface AddToCartAction extends AnyAction {\n  productId: string;\n  quantity: number;\n  type: typeof ADD_TO_CART;\n}\n\n/** Create type for reducer actions */\nexport type ShopActionTypes =\n  | FetchShopItemsAction\n  | SetShopItemsAction\n  | AddToCartAction\n  | AnyAction;\n\n// action creators\n\n/** set shop items action creator\n * @param {ShopItem[]} items - shop items to be set\n * @returns {SetShopItemsAction} - an action to set items in store\n */\nexport const setShopItems = (items: ShopItem[]): SetShopItemsAction => ({\n  items,\n  type: SET_SHOP_ITEMS,\n});\n\n/** fetch shop items from the server\n * @returns {FetchShopItemsAction} - an action to fetch items from server\n */\nexport const fetchShopItems = (): FetchShopItemsAction => ({\n  type: FETCH_SHOP_ITEMS,\n});\n\n/**\n * add items to cart\n * @param {string} productId -  the product that is added\n * @param  {number} quantity - the quantity that is added to cart\n * @returns {AddToCartAction} - an action to add items to cart in store\n */\nexport const addToCartAction = (\n  productId: string,\n  quantity: number\n): AddToCartAction => ({\n  productId,\n  quantity,\n  type: ADD_TO_CART,\n});\n\n// epics\n\n/**\n * rxjs based epic to fetch shop items list from server\n * @param {Observable<ShopActionTypes>} action$ - a series of actions observables\n * @returns {Observable<Exclude<ShopActionTypes, FetchShopItemsAction>>} - an action observable other than the FETCH_SHOP_ITEMS\n */\nexport const fetchShopItemsEpic = (\n  action$: Observable<ShopActionTypes>\n): Observable<Exclude<ShopActionTypes, FetchShopItemsAction>> =>\n  action$.pipe(\n    ofType(FETCH_SHOP_ITEMS),\n    mergeMap(() =>\n      ajax\n        .getJSON(\n          `https://gist.githubusercontent.com/naieem/c138ff1f12847b2a1b8ad85866426d3d/raw/037825eee126d589ab3e1fff6c3d0119f33f3b5b/Products`\n        )\n        .pipe(map((response) => setShopItems(response as ShopItem[])))\n    )\n  );\n\n// the reducer\n\n/** interface for shop state in redux store */\ninterface ShopState {\n  shopItems: ShopItem[];\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  cart: object;\n}\n\n/** Create an immutable shop state */\nexport type ImmutableShopState = SeamlessImmutable.Immutable<ShopState>;\n\n/** initial shop state */\nconst initialState: ImmutableShopState = SeamlessImmutable({\n  shopItems: [],\n  cart: {},\n});\n\n/** the shop reducer function */\nexport default function reducer(\n  state: ImmutableShopState = initialState,\n  action: ShopActionTypes\n): ImmutableShopState {\n  switch (action.type) {\n    case SET_SHOP_ITEMS:\n      return SeamlessImmutable({\n        ...state,\n        shopItems: action.items,\n      });\n    case ADD_TO_CART:\n      return SeamlessImmutable({\n        ...state,\n        cart: {\n          ...state.cart,\n          [action.productId]: action.quantity,\n        },\n      });\n    default:\n      return state;\n  }\n}\n\n// selectors\n\n/** returns all the shop items\n * @param {Partial<Store>} state - the redux store\n * @returns { ShopItem[] } - the existing items\n */\nexport function getAllShopItems(state: Partial<Store>): ShopItem[] {\n  return (state as any)[reducerName].shopItems;\n}\n\n/**\n * returns the shop item by product id; otherwise null\n * @param {Partial<Store>} state - the redux store\n * @param {string} productId - the product id\n * @returns { ShopItem | null } - the product id if matched; otherwise null\n */\nexport function getShopItemById(\n  state: Partial<Store>,\n  productId: string\n): ShopItem | null {\n  return lodash.find((state as any)[reducerName].shopItems, { _id: productId });\n}\n\n/**\n * returns the shop item quantity in cart\n * @param {Partial<Store>} state - the redux store\n * @param {string} productId - the product id\n * @returns { number } - the quantity\n */\nexport function getQuantityById(\n  state: Partial<Store>,\n  productId: string\n): number {\n  return (state as any)[reducerName].cart[productId] || 0;\n}\n\n/**\n * returns the cart object value\n * @param state - the redux store\n * @returns { any } - the current object in the cart property of the store\n */\nexport function getCartValues(state: Partial<Store>): any {\n  return (state as any)[reducerName].cart;\n}\n","import { combineReducers, createStore, compose, applyMiddleware } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport { combineEpics } from 'redux-observable';\nimport { createEpicMiddleware } from 'redux-observable';\nimport shop, {\n  reducerName as shopReducer,\n  fetchShopItemsEpic,\n} from './ducks/shop';\n\n// reducers\n\n/** Initial reducers in the reducer registry */\nconst defaultReducers: any = {};\n\n/** Add shop reducer to registry */\ndefaultReducers[shopReducer] = shop;\n\n/** Create reducers from default reducers obj */\nconst reducers = combineReducers(defaultReducers);\n\n// epics\n\n/** Create root epics */\nexport const rootEpic = combineEpics(fetchShopItemsEpic);\n\n// middlewares\n\n/** Create the epic middleware */\nconst epicMiddleware = createEpicMiddleware();\n\n// Redux Dev Tools\n\n/** Create composer for redux dev tools */\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// store\n\n/** The initial store */\nconst store = createStore(\n  reducers,\n  SeamlessImmutable({}),\n  composeEnhancers(applyMiddleware(epicMiddleware))\n);\n\n/** Start the epic middleware */\nepicMiddleware.run(rootEpic);\n\nexport default store;\n","import React from 'react';\nimport './Order.scss';\nimport {\n  Button,\n  Icon,\n  IconButton,\n  Typography,\n  TextField,\n} from '@material-ui/core';\n\ninterface OrderProps {\n  setHandler: (value: number) => void;\n  cartCount: number;\n  stock: number;\n  withoutLabel?: boolean;\n}\n\nconst Order: React.FC<OrderProps> = (props: OrderProps) => {\n  const { stock, cartCount, setHandler, withoutLabel } = props;\n  const [count, setCount] = React.useState<number>(cartCount);\n  const freeInputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const requestedValue = parseInt(event.target.value);\n    if (requestedValue > stock) {\n      setHandler(stock);\n    } else if (requestedValue < 0) {\n      setHandler(0);\n    } else {\n      setHandler(requestedValue);\n    }\n  };\n\n  React.useEffect(() => {\n    setCount(cartCount);\n  }, [cartCount]);\n\n  const addToCartHandler = () => {\n    setHandler(cartCount + 1);\n  };\n\n  const removeToCartHandler = () => {\n    setHandler(cartCount - 1);\n  };\n\n  const setCountHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCount(parseInt(event.target.value));\n  };\n\n  return (\n    <div className=\"Order-container\">\n      {cartCount > 0 ? (\n        <React.Fragment>\n          <IconButton\n            style={{ color: 'red' }}\n            size=\"small\"\n            onClick={removeToCartHandler}\n          >\n            <Icon>remove</Icon>\n          </IconButton>\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"p\"\n            className=\"Order-label\"\n          >\n            {!withoutLabel && (\n              <Icon className=\"cart-icon\">add_shopping_cart</Icon>\n            )}{' '}\n            {!withoutLabel && <div>Added</div>}\n            <TextField\n              className=\"Order-count\"\n              type=\"number\"\n              value={count}\n              onChange={setCountHandler}\n              onBlur={freeInputHandler as any}\n            />\n          </Typography>\n          <IconButton\n            size=\"small\"\n            onClick={addToCartHandler}\n            style={{ color: cartCount === stock ? 'inherit' : 'blue' }}\n            disabled={cartCount === stock}\n          >\n            <Icon>add</Icon>\n          </IconButton>\n        </React.Fragment>\n      ) : (\n        <Button\n          onClick={addToCartHandler}\n          disabled={cartCount === stock}\n          size=\"small\"\n          color=\"primary\"\n        >\n          <Icon>add_shopping_cart</Icon> Add to cart\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default Order;\n","import React from 'react';\nimport {\n  ShopItem,\n  addToCartAction,\n  getQuantityById,\n} from '../../store/ducks/shop';\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Typography,\n  CardActions,\n} from '@material-ui/core';\nimport './ShelveItem.scss';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Order from '../../Components/Order/Order';\n\n/** interface to describe Shelve Item props */\ninterface ShelveItemProps extends ShopItem {\n  cartCount: number;\n  addToCartActionCreator: typeof addToCartAction;\n}\n\nconst ShelveItem: React.FC<ShelveItemProps> = (props: ShelveItemProps) => {\n  const {\n    _id,\n    title,\n    price,\n    picture,\n    addToCartActionCreator,\n    cartCount,\n    stock,\n  } = props;\n\n  const setHandler = (value: number) => {\n    addToCartActionCreator(_id, value);\n  };\n\n  return (\n    <Card className=\"ShelveItem-card\">\n      <Link to={`/product/${_id}`}>\n        <CardActionArea>\n          <CardMedia\n            className=\"ShelveItem-media\"\n            image={picture}\n            title=\"Contemplative Reptile\"\n          ></CardMedia>\n          <CardContent className=\"ShelveItem-content\">\n            <Typography\n              gutterBottom\n              color=\"textSecondary\"\n              variant=\"body2\"\n              component=\"p\"\n            >\n              {title}\n            </Typography>\n            <Typography variant=\"h6\" component=\"p\">\n              $ {price}\n            </Typography>\n            {cartCount === stock && (\n              <Typography\n                style={{ color: 'red' }}\n                variant=\"body2\"\n                color=\"textSecondary\"\n                component=\"p\"\n              >\n                Out of Stock\n              </Typography>\n            )}\n          </CardContent>\n        </CardActionArea>\n      </Link>\n      <CardActions>\n        <Order stock={stock} cartCount={cartCount} setHandler={setHandler} />\n      </CardActions>\n    </Card>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  cartCount: number;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: any\n): DispatchedStateProps => {\n  const result = {\n    cartCount: getQuantityById(state, parentProps._id),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  addToCartActionCreator: addToCartAction,\n};\n\n/** Connect ShelveItem to the redux store */\nconst ConnectedShelveItem = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ShelveItem);\n\nexport default ConnectedShelveItem;\n","import React from 'react';\nimport { ShopItem } from '../../store/ducks/shop';\nimport {\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Icon,\n} from '@material-ui/core';\n\n/** Interface to describe CartItem props */\ninterface CartItemProps extends ShopItem {\n  count: number;\n  addToCartHandler: any;\n}\n\nconst CartItem: React.FC<CartItemProps> = (props: CartItemProps) => {\n  const { _id, title, price, count, addToCartHandler, picture } = props;\n  const removeHandler = () => {\n    addToCartHandler(_id, 0);\n  };\n  return (\n    <ListItem>\n      <ListItemAvatar>\n        <Avatar variant=\"square\" alt=\"\" src={picture} />\n      </ListItemAvatar>\n      <ListItemText primary={title} secondary={`${count} x $ ${price}`} />\n      <ListItemSecondaryAction>\n        <IconButton edge=\"start\" aria-label=\"delete\" onClick={removeHandler}>\n          <Icon>clear</Icon>\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default CartItem;\n","import React from 'react';\nimport './Cart.scss';\nimport {\n  ShopItem,\n  getAllShopItems,\n  addToCartAction,\n  getCartValues,\n} from '../../store/ducks/shop';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport lodash from 'lodash';\nimport {\n  List,\n  Typography,\n  Divider,\n  ListItem,\n  ListItemText,\n  Button,\n} from '@material-ui/core';\nimport CartItem from '../../Components/CartItem/CartItem';\nimport { Link } from 'react-router-dom';\n\ninterface CartProps {\n  items: ShopItem[];\n  cartObject: any;\n  addToCartActionCreator: typeof addToCartAction;\n}\n\nconst Cart: React.FC<CartProps> = (props: CartProps) => {\n  const { cartObject, items, addToCartActionCreator } = props;\n  const cartObjectKeys = lodash.keys(cartObject);\n  let total = 0;\n  const cartItems = cartObjectKeys\n    .map((pid) => ({\n      ...(lodash.find(items, { _id: pid }) || {}),\n      count: cartObject[pid],\n      addToCartHandler: addToCartActionCreator,\n    }))\n    .filter((item) => item.count !== 0);\n  cartItems.forEach((item: any) => (total = total + item.count * item.price));\n  return (\n    <div className=\"Cart-container\">\n      <Typography variant=\"body2\"> Cart </Typography>\n      {cartItems.length > 0 && (\n        <List className=\"list-container\">\n          {cartItems.map((item: any) => (\n            <div key={item._id}>\n              <CartItem {...item} />\n            </div>\n          ))}\n          <Divider />\n          <ListItem>\n            <ListItemText primary={'Subtotal $ ' + total} secondary=\"\" />\n          </ListItem>\n          <ListItem>\n            <Link to=\"/checkout\">\n              <Button variant=\"contained\" color=\"primary\">\n                Proceed to Checkout\n              </Button>\n            </Link>\n          </ListItem>\n        </List>\n      )}\n      {cartItems.length <= 0 && (\n        <List>\n          <ListItem>\n            <ListItemText primary=\"No items to display\" secondary=\"\" />\n          </ListItem>\n        </List>\n      )}\n    </div>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  items: ShopItem[];\n  cartObject: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    items: getAllShopItems(state),\n    cartObject: getCartValues(state),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  addToCartActionCreator: addToCartAction,\n};\n\n/** Connect Cart to the redux store */\nconst ConnectedCart = connect(mapStateToProps, mapDispatchToProps)(Cart);\n\nexport default ConnectedCart;\n","import React from 'react';\nimport './withCart.scss';\nimport ConnectedCart from '../../Containers/Cart/Cart';\n\nfunction withCart<P>(Component: React.ComponentType<P>) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return (props: P) => {\n    {\n      return (\n        <div className=\"withCart-container\">\n          <div className=\"withCart-main-content\">\n            <Component {...props} />\n          </div>\n          <div className=\"withCart-content\">\n            <ConnectedCart />\n          </div>\n        </div>\n      );\n    }\n  };\n}\n\nexport default withCart;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport './Header.scss';\n\nconst Header: React.FC = () => {\n  return (\n    <div className=\"Header-container\">\n      <Typography className=\"Header-logo\" variant=\"h5\">\n        Shop\n      </Typography>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './withHeader.scss';\nimport Header from '../../Components/Header/Header';\n\nfunction withHeader<P>(Component: React.ComponentType<P>) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return (props: P) => {\n    {\n      return (\n        <div className=\"withHeader-container\">\n          <Header />\n          <Component {...props} />\n        </div>\n      );\n    }\n  };\n}\n\nexport default withHeader;\n","import React from 'react';\nimport { getAllShopItems, ShopItem } from '../../store/ducks/shop';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport lodash from 'lodash';\nimport { TextField, MenuItem, Typography } from '@material-ui/core';\nimport ShelveItem from '../ShelveItem/ShelveItem';\nimport './Shelve.scss';\nimport withCart from '../../hocs/withCart/withCart';\nimport withHeader from '../../hocs/withHeader/withHeader';\n\n/** Interface to describe Shelve props */\ninterface ShelveProps {\n  items: ShopItem[];\n}\n\n/** Interface to describe items order option */\ninterface OrderOption {\n  label: string;\n  value: 'asc' | 'desc';\n}\n\n/** Available item order option */\nconst ORDER_OPTIONS: OrderOption[] = [\n  { label: 'Sort by price high to low', value: 'desc' },\n  { label: 'Sort by price low to high', value: 'asc' },\n];\n\nconst Shelve: React.FC<ShelveProps> = (props: ShelveProps) => {\n  const { items } = props;\n\n  // component based states\n  /** showcasedItems are items that are viewable to shelves */\n  const [showcasedItems, setShowcasedItems] = React.useState<ShopItem[]>([]);\n  /** manages the order state of items based on price property*/\n  const [isOrderAsc, setOrderAsc] = React.useState<boolean>(false);\n\n  /** update the showcasedItems based on changes of items or price order  */\n  React.useEffect(() => {\n    if (isOrderAsc) {\n      setShowcasedItems(lodash.orderBy(items, ['price'], ['asc']));\n    } else {\n      setShowcasedItems(lodash.orderBy(items, ['price'], ['desc']));\n    }\n  }, [items, isOrderAsc]);\n\n  /**\n   * Updates order option based on selected option\n   * @param {React.ChangeEvent<HTMLInputElement>} event - order option change event\n   */\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setOrderAsc(event.target.value === 'asc' ? true : false);\n\n  return (\n    <div className=\"Shelve-container\">\n      <div className=\"Shelve-header\">\n        <Typography variant=\"body2\">\n          Showing {showcasedItems.length} out of {showcasedItems.length} items\n        </Typography>\n        <TextField\n          select\n          label=\"\"\n          value={isOrderAsc ? 'asc' : 'desc'}\n          onChange={handleChange}\n        >\n          {ORDER_OPTIONS.map((option: OrderOption) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n      <div className=\"Shelve-body\">\n        {showcasedItems.map((item) => (\n          <ShelveItem key={item._id} {...item} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  items: ShopItem[];\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    items: getAllShopItems(state),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {};\n\n/** Connect Shelve to the redux store */\nconst ConnectedShelve = connect(mapStateToProps, mapDispatchToProps)(Shelve);\n\nexport default withCart(withHeader(ConnectedShelve));\n","import React from 'react';\nimport './withProductId.scss';\nimport { useParams } from 'react-router-dom';\n\nfunction withProductId<P>(Component: React.ComponentType<P>) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return (props: P) => {\n    {\n      const { id } = useParams();\n      return <Component {...{ ...props, id }} />;\n    }\n  };\n}\n\nexport default withProductId;\n","import React from 'react';\nimport './Product.scss';\nimport {\n  ShopItem,\n  addToCartAction,\n  getQuantityById,\n  getShopItemById,\n} from '../../store/ducks/shop';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  Typography,\n  Card,\n  CardMedia,\n  CardContent,\n  Tabs,\n  Tab,\n  Icon,\n} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport withCart from '../../hocs/withCart/withCart';\nimport withHeader from '../../hocs/withHeader/withHeader';\nimport withProductId from '../../hocs/withProductId/withProductId';\nimport Order from '../../Components/Order/Order';\n\ninterface ProductProps {\n  id: string;\n  count: number;\n  item: ShopItem | null;\n  addToCartActionCreator: typeof addToCartAction;\n}\n\nconst Product: React.FC<ProductProps> = (props: ProductProps) => {\n  const { count, item, addToCartActionCreator } = props;\n  return (\n    <>\n      <Link className=\"back-btn\" to=\"/\">\n        <Icon> keyboard_backspace_icon</Icon> Return to List\n      </Link>\n      {item && (\n        <React.Fragment>\n          <Card className=\"Product-card\">\n            <CardMedia\n              className=\"Product-media\"\n              image={item.picture}\n            ></CardMedia>\n            <CardContent className=\"Product-content\">\n              <Typography gutterBottom variant=\"h5\" component=\"p\">\n                {item.title}\n              </Typography>\n              <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n                $ {item.price}\n              </Typography>\n              {count === item.stock && (\n                <Typography\n                  style={{ color: 'red' }}\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  component=\"p\"\n                >\n                  Out of Stock\n                </Typography>\n              )}\n              <Order\n                stock={item.stock}\n                cartCount={count}\n                setHandler={(value: number) =>\n                  addToCartActionCreator(item._id, value)\n                }\n              />\n            </CardContent>\n          </Card>\n          <div className=\"Product-tab-section\">\n            <Tabs className=\"Product-tabs\">\n              <Tab className=\"Product-tab\" label=\"Description\" />\n            </Tabs>\n            <Typography\n              className=\"Product-tab-content\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n              component=\"p\"\n            >\n              {item.description}\n            </Typography>\n          </div>\n        </React.Fragment>\n      )}\n    </>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps extends Partial<ShopItem> {\n  count: number;\n  item: ShopItem | null;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: any\n): DispatchedStateProps => {\n  const getProduct = (id: string) => getShopItemById(state, id);\n  const getQuantity = (id: string) => getQuantityById(state, id);\n  const result = {\n    count: getQuantity(parentProps.id),\n    item: getProduct(parentProps.id),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  addToCartActionCreator: addToCartAction,\n};\n\n/** Connect Product to the redux store */\nconst ConnectedProduct = connect(mapStateToProps, mapDispatchToProps)(Product);\n\nexport default withCart(withHeader(withProductId(ConnectedProduct)));\n","import React from 'react';\nimport { ShopItem } from '../../store/ducks/shop';\nimport {\n  Avatar,\n  IconButton,\n  Icon,\n  TableRow,\n  TableCell,\n  Typography,\n} from '@material-ui/core';\nimport Order from '../Order/Order';\nimport './CheckoutItem.scss';\n\n/** Interface to describe CheckoutItem props */\ninterface CheckoutItemProps extends ShopItem {\n  count: number;\n  addToCartHandler: any;\n}\n\nconst CheckoutItem: React.FC<CheckoutItemProps> = (\n  props: CheckoutItemProps\n) => {\n  const { _id, title, price, count, addToCartHandler, picture, stock } = props;\n  const removeHandler = () => {\n    addToCartHandler(_id, 0);\n  };\n  const setHandler = (value: number) => {\n    addToCartHandler(_id, value);\n  };\n  return (\n    <TableRow>\n      <TableCell align=\"right\">\n        <IconButton onClick={removeHandler} size=\"small\">\n          <Icon>clear </Icon>\n        </IconButton>\n      </TableCell>\n      <TableCell component=\"th\" scope=\"row\">\n        <div className=\"CheckoutItem-description\">\n          <Avatar variant=\"square\" alt=\"\" src={picture} />\n          {title}\n        </div>\n      </TableCell>\n      <TableCell align=\"right\">{price}</TableCell>\n      <TableCell align=\"right\">\n        <Order\n          stock={stock}\n          cartCount={count}\n          setHandler={setHandler}\n          withoutLabel={true}\n        />\n        {count === stock && (\n          <Typography\n            style={{ color: 'red' }}\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"p\"\n          >\n            Out of Stock\n          </Typography>\n        )}\n      </TableCell>\n      <TableCell align=\"right\">$ {price * count}</TableCell>\n    </TableRow>\n  );\n};\n\nexport default CheckoutItem;\n","import React from 'react';\nimport './Checkout.scss';\nimport {\n  ShopItem,\n  getAllShopItems,\n  addToCartAction,\n  getCartValues,\n} from '../../store/ducks/shop';\nimport { Store } from 'redux';\nimport { connect } from 'react-redux';\nimport lodash from 'lodash';\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  TableContainer,\n  Paper,\n  Icon,\n} from '@material-ui/core';\nimport { Redirect, Link } from 'react-router-dom';\nimport CheckoutItem from '../../Components/CheckoutItem/CheckoutItem';\nimport withHeader from '../../hocs/withHeader/withHeader';\n\ninterface CheckoutProps {\n  items: ShopItem[];\n  cartObject: any;\n  addToCartActionCreator: typeof addToCartAction;\n}\n\nconst Checkout: React.FC<CheckoutProps> = (props: CheckoutProps) => {\n  const { cartObject, items, addToCartActionCreator } = props;\n  const cartObjectKeys = lodash.keys(cartObject);\n  let total = 0;\n  const cartItems = cartObjectKeys\n    .map((pid) => ({\n      ...(lodash.find(items, { _id: pid }) || {}),\n      count: cartObject[pid],\n      addToCartHandler: addToCartActionCreator,\n    }))\n    .filter((item) => item.count !== 0);\n  cartItems.forEach((item: any) => (total = total + item.count * item.price));\n  return (\n    <div className=\"Checkout-container\">\n      <Link className=\"back-btn\" to=\"/\">\n        <Icon> keyboard_backspace_icon</Icon> Return to List\n      </Link>\n      {cartItems.length > 0 && (\n        <>\n          <div className=\"Checkout-items-container\">\n            <div className=\"Checkout-items-section\">\n              <TableContainer className=\"Checkout-table\" component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell></TableCell>\n                      <TableCell align=\"center\">Product</TableCell>\n                      <TableCell align=\"right\">Price</TableCell>\n                      <TableCell align=\"center\">Quantity</TableCell>\n                      <TableCell align=\"right\">Subtotal</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {cartItems.map((item: any) => (\n                      <CheckoutItem key={item._id} {...item} />\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <>\n                <div className=\"Checkout-payout-section\">\n                  <TableContainer\n                    className=\"Checkout-payout-table\"\n                    component={Paper}\n                  >\n                    <Table>\n                      <TableBody>\n                        <TableRow>\n                          <TableCell component=\"th\" align=\"center\">\n                            Subtotal\n                          </TableCell>\n                          <TableCell align=\"right\">${total}</TableCell>\n                        </TableRow>\n                        <TableRow>\n                          <TableCell component=\"th\" align=\"center\">\n                            Shipping\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            Free Shipping. <br /> Shipping options will be\n                            updated during checkout\n                          </TableCell>\n                        </TableRow>\n                        <TableRow>\n                          <TableCell component=\"th\" align=\"center\">\n                            Total\n                          </TableCell>\n                          <TableCell align=\"right\">${total}</TableCell>\n                        </TableRow>\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </div>\n              </>\n            </div>\n          </div>\n        </>\n      )}\n      {cartItems.length <= 0 && <Redirect to=\"/\" />}\n    </div>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  items: ShopItem[];\n  cartObject: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    items: getAllShopItems(state),\n    cartObject: getCartValues(state),\n  };\n  return result;\n};\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  addToCartActionCreator: addToCartAction,\n};\n\n/** Connect Checkout to the redux store */\nconst ConnectedCheckout = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Checkout);\n\nexport default withHeader(ConnectedCheckout);\n","import React from 'react';\nimport './App.scss';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Shelve from '../Containers/Shelve/Shelve';\nimport ConnectedProduct from '../Containers/Product/Product';\nimport { fetchShopItems } from '../store/ducks/shop';\nimport { connect } from 'react-redux';\nimport ConnectedCheckout from '../Containers/Checkout/Checkout';\n\ninterface AppProps {\n  fetchShopItemsActionCreator: typeof fetchShopItems;\n}\n\nconst App: React.FC<AppProps> = (props: AppProps) => {\n  const { fetchShopItemsActionCreator } = props;\n  /** fetch the shop items from server on load */\n  React.useEffect(() => {\n    fetchShopItemsActionCreator();\n  }, []);\n  return (\n    <React.Fragment>\n      <Router basename=\"/\">\n        <Switch>\n          <Route path=\"/product/:id\">\n            <ConnectedProduct />\n          </Route>\n          <Route path=\"/checkout\">\n            <ConnectedCheckout />\n          </Route>\n          <Route path=\"/\">\n            <Shelve />\n          </Route>\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n};\n\n/** Connect the component to the store */\n\n/** Map props to actions */\nconst mapDispatchToProps = {\n  fetchShopItemsActionCreator: fetchShopItems,\n};\n\n/** Connect App to the redux store */\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}